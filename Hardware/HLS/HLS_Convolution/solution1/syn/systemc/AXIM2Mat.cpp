// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AXIM2Mat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AXIM2Mat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AXIM2Mat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> AXIM2Mat::ap_ST_fsm_state1 = "1";
const sc_lv<4> AXIM2Mat::ap_ST_fsm_state2 = "10";
const sc_lv<4> AXIM2Mat::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> AXIM2Mat::ap_ST_fsm_state5 = "1000";
const bool AXIM2Mat::ap_const_boolean_1 = true;
const sc_lv<32> AXIM2Mat::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AXIM2Mat::ap_const_lv32_2 = "10";
const bool AXIM2Mat::ap_const_boolean_0 = false;
const sc_lv<1> AXIM2Mat::ap_const_lv1_0 = "0";
const sc_lv<32> AXIM2Mat::ap_const_lv32_1 = "1";
const sc_lv<1> AXIM2Mat::ap_const_lv1_1 = "1";
const sc_lv<32> AXIM2Mat::ap_const_lv32_3 = "11";
const sc_lv<11> AXIM2Mat::ap_const_lv11_0 = "00000000000";
const sc_lv<7> AXIM2Mat::ap_const_lv7_0 = "0000000";

AXIM2Mat::AXIM2Mat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln178_fu_201_p2);
    sensitive << ( ret_V_reg_230 );
    sensitive << ( trunc_ln178_fu_197_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_235 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_235 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_235 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( icmp_ln175_reg_235 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln175_fu_186_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( icmp_ln174_fu_145_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_col_V_fu_191_p2);
    sensitive << ( t_V_3_reg_126 );

    SC_METHOD(thread_cols_V_fu_141_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_cols_V_dout );

    SC_METHOD(thread_cols_V_fu_141_p1);
    sensitive << ( cols_V_fu_141_p0 );

    SC_METHOD(thread_fb_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( sext_ln178_fu_206_p1 );

    SC_METHOD(thread_fb_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln174_fu_145_p2);
    sensitive << ( rows_V_reg_211 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_V_reg_115 );

    SC_METHOD(thread_icmp_ln175_fu_186_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_3_reg_126 );
    sensitive << ( cols_V_reg_216 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_img_cols_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_cols_V_empty_n );

    SC_METHOD(thread_img_cols_V_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_cols_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_dout );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_cols_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_cols_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_data_stream_V_blk_n);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln175_reg_235 );

    SC_METHOD(thread_img_data_stream_V_din);
    sensitive << ( fb_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_235 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_img_data_stream_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_235 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_rows_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_empty_n );

    SC_METHOD(thread_img_rows_V_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_out_full_n );

    SC_METHOD(thread_img_rows_V_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_dout );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_rows_V_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_img_rows_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( icmp_ln174_fu_145_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_ret_V_fu_180_p2);
    sensitive << ( shl_ln_fu_160_p3 );
    sensitive << ( shl_ln1352_2_fu_172_p3 );

    SC_METHOD(thread_row_V_fu_150_p2);
    sensitive << ( t_V_reg_115 );

    SC_METHOD(thread_rows_V_fu_137_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_dout );

    SC_METHOD(thread_rows_V_fu_137_p1);
    sensitive << ( rows_V_fu_137_p0 );

    SC_METHOD(thread_sext_ln178_fu_206_p1);
    sensitive << ( add_ln178_fu_201_p2 );

    SC_METHOD(thread_shl_ln1352_2_fu_172_p3);
    sensitive << ( trunc_ln1352_1_fu_168_p1 );

    SC_METHOD(thread_shl_ln_fu_160_p3);
    sensitive << ( trunc_ln1352_fu_156_p1 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_trunc_ln1352_1_fu_168_p1);
    sensitive << ( t_V_reg_115 );

    SC_METHOD(thread_trunc_ln1352_fu_156_p1);
    sensitive << ( t_V_reg_115 );

    SC_METHOD(thread_trunc_ln178_fu_197_p1);
    sensitive << ( t_V_3_reg_126 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( img_rows_V_empty_n );
    sensitive << ( img_cols_V_empty_n );
    sensitive << ( img_rows_V_out_full_n );
    sensitive << ( img_cols_V_out_full_n );
    sensitive << ( icmp_ln174_fu_145_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln175_fu_186_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AXIM2Mat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, fb_address0, "(port)fb_address0");
    sc_trace(mVcdFile, fb_ce0, "(port)fb_ce0");
    sc_trace(mVcdFile, fb_q0, "(port)fb_q0");
    sc_trace(mVcdFile, img_rows_V_dout, "(port)img_rows_V_dout");
    sc_trace(mVcdFile, img_rows_V_empty_n, "(port)img_rows_V_empty_n");
    sc_trace(mVcdFile, img_rows_V_read, "(port)img_rows_V_read");
    sc_trace(mVcdFile, img_cols_V_dout, "(port)img_cols_V_dout");
    sc_trace(mVcdFile, img_cols_V_empty_n, "(port)img_cols_V_empty_n");
    sc_trace(mVcdFile, img_cols_V_read, "(port)img_cols_V_read");
    sc_trace(mVcdFile, img_data_stream_V_din, "(port)img_data_stream_V_din");
    sc_trace(mVcdFile, img_data_stream_V_full_n, "(port)img_data_stream_V_full_n");
    sc_trace(mVcdFile, img_data_stream_V_write, "(port)img_data_stream_V_write");
    sc_trace(mVcdFile, img_rows_V_out_din, "(port)img_rows_V_out_din");
    sc_trace(mVcdFile, img_rows_V_out_full_n, "(port)img_rows_V_out_full_n");
    sc_trace(mVcdFile, img_rows_V_out_write, "(port)img_rows_V_out_write");
    sc_trace(mVcdFile, img_cols_V_out_din, "(port)img_cols_V_out_din");
    sc_trace(mVcdFile, img_cols_V_out_full_n, "(port)img_cols_V_out_full_n");
    sc_trace(mVcdFile, img_cols_V_out_write, "(port)img_cols_V_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, img_rows_V_blk_n, "img_rows_V_blk_n");
    sc_trace(mVcdFile, img_cols_V_blk_n, "img_cols_V_blk_n");
    sc_trace(mVcdFile, img_data_stream_V_blk_n, "img_data_stream_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln175_reg_235, "icmp_ln175_reg_235");
    sc_trace(mVcdFile, img_rows_V_out_blk_n, "img_rows_V_out_blk_n");
    sc_trace(mVcdFile, img_cols_V_out_blk_n, "img_cols_V_out_blk_n");
    sc_trace(mVcdFile, t_V_3_reg_126, "t_V_3_reg_126");
    sc_trace(mVcdFile, rows_V_fu_137_p1, "rows_V_fu_137_p1");
    sc_trace(mVcdFile, rows_V_reg_211, "rows_V_reg_211");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, cols_V_fu_141_p1, "cols_V_fu_141_p1");
    sc_trace(mVcdFile, cols_V_reg_216, "cols_V_reg_216");
    sc_trace(mVcdFile, icmp_ln174_fu_145_p2, "icmp_ln174_fu_145_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, row_V_fu_150_p2, "row_V_fu_150_p2");
    sc_trace(mVcdFile, row_V_reg_225, "row_V_reg_225");
    sc_trace(mVcdFile, ret_V_fu_180_p2, "ret_V_fu_180_p2");
    sc_trace(mVcdFile, ret_V_reg_230, "ret_V_reg_230");
    sc_trace(mVcdFile, icmp_ln175_fu_186_p2, "icmp_ln175_fu_186_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, col_V_fu_191_p2, "col_V_fu_191_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, t_V_reg_115, "t_V_reg_115");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, sext_ln178_fu_206_p1, "sext_ln178_fu_206_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, rows_V_fu_137_p0, "rows_V_fu_137_p0");
    sc_trace(mVcdFile, cols_V_fu_141_p0, "cols_V_fu_141_p0");
    sc_trace(mVcdFile, trunc_ln1352_fu_156_p1, "trunc_ln1352_fu_156_p1");
    sc_trace(mVcdFile, trunc_ln1352_1_fu_168_p1, "trunc_ln1352_1_fu_168_p1");
    sc_trace(mVcdFile, shl_ln_fu_160_p3, "shl_ln_fu_160_p3");
    sc_trace(mVcdFile, shl_ln1352_2_fu_172_p3, "shl_ln1352_2_fu_172_p3");
    sc_trace(mVcdFile, trunc_ln178_fu_197_p1, "trunc_ln178_fu_197_p1");
    sc_trace(mVcdFile, add_ln178_fu_201_p2, "add_ln178_fu_201_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

AXIM2Mat::~AXIM2Mat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AXIM2Mat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln174_fu_145_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln174_fu_145_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln174_fu_145_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln175_fu_186_p2.read()))) {
        t_V_3_reg_126 = col_V_fu_191_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln174_fu_145_p2.read()))) {
        t_V_3_reg_126 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_V_reg_115 = row_V_reg_225.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        t_V_reg_115 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        cols_V_reg_216 = cols_V_fu_141_p1.read();
        rows_V_reg_211 = rows_V_fu_137_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln175_reg_235 = icmp_ln175_fu_186_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln174_fu_145_p2.read()))) {
        ret_V_reg_230 = ret_V_fu_180_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        row_V_reg_225 = row_V_fu_150_p2.read();
    }
}

void AXIM2Mat::thread_add_ln178_fu_201_p2() {
    add_ln178_fu_201_p2 = (!trunc_ln178_fu_197_p1.read().is_01() || !ret_V_reg_230.read().is_01())? sc_lv<22>(): (sc_biguint<22>(trunc_ln178_fu_197_p1.read()) + sc_biguint<22>(ret_V_reg_230.read()));
}

void AXIM2Mat::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void AXIM2Mat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AXIM2Mat::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AXIM2Mat::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void AXIM2Mat::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXIM2Mat::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln175_reg_235.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_full_n.read()));
}

void AXIM2Mat::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln175_reg_235.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_full_n.read()));
}

void AXIM2Mat::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln175_reg_235.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_full_n.read()));
}

void AXIM2Mat::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read()));
}

void AXIM2Mat::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AXIM2Mat::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln175_reg_235.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_full_n.read()));
}

void AXIM2Mat::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln175_fu_186_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln174_fu_145_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AXIM2Mat::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AXIM2Mat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void AXIM2Mat::thread_col_V_fu_191_p2() {
    col_V_fu_191_p2 = (!t_V_3_reg_126.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_3_reg_126.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AXIM2Mat::thread_cols_V_fu_141_p0() {
    cols_V_fu_141_p0 = img_cols_V_dout.read();
}

void AXIM2Mat::thread_cols_V_fu_141_p1() {
    cols_V_fu_141_p1 = esl_sext<32,12>(cols_V_fu_141_p0.read());
}

void AXIM2Mat::thread_fb_address0() {
    fb_address0 =  (sc_lv<21>) (sext_ln178_fu_206_p1.read());
}

void AXIM2Mat::thread_fb_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        fb_ce0 = ap_const_logic_1;
    } else {
        fb_ce0 = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_icmp_ln174_fu_145_p2() {
    icmp_ln174_fu_145_p2 = (!t_V_reg_115.read().is_01() || !rows_V_reg_211.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_115.read() == rows_V_reg_211.read());
}

void AXIM2Mat::thread_icmp_ln175_fu_186_p2() {
    icmp_ln175_fu_186_p2 = (!t_V_3_reg_126.read().is_01() || !cols_V_reg_216.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_3_reg_126.read() == cols_V_reg_216.read());
}

void AXIM2Mat::thread_img_cols_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        img_cols_V_blk_n = img_cols_V_empty_n.read();
    } else {
        img_cols_V_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_cols_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        img_cols_V_out_blk_n = img_cols_V_out_full_n.read();
    } else {
        img_cols_V_out_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_cols_V_out_din() {
    img_cols_V_out_din = img_cols_V_dout.read();
}

void AXIM2Mat::thread_img_cols_V_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        img_cols_V_out_write = ap_const_logic_1;
    } else {
        img_cols_V_out_write = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_img_cols_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        img_cols_V_read = ap_const_logic_1;
    } else {
        img_cols_V_read = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_img_data_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln175_reg_235.read(), ap_const_lv1_0))) {
        img_data_stream_V_blk_n = img_data_stream_V_full_n.read();
    } else {
        img_data_stream_V_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_data_stream_V_din() {
    img_data_stream_V_din = fb_q0.read();
}

void AXIM2Mat::thread_img_data_stream_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln175_reg_235.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_data_stream_V_write = ap_const_logic_1;
    } else {
        img_data_stream_V_write = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_img_rows_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        img_rows_V_blk_n = img_rows_V_empty_n.read();
    } else {
        img_rows_V_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_rows_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        img_rows_V_out_blk_n = img_rows_V_out_full_n.read();
    } else {
        img_rows_V_out_blk_n = ap_const_logic_1;
    }
}

void AXIM2Mat::thread_img_rows_V_out_din() {
    img_rows_V_out_din = img_rows_V_dout.read();
}

void AXIM2Mat::thread_img_rows_V_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        img_rows_V_out_write = ap_const_logic_1;
    } else {
        img_rows_V_out_write = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_img_rows_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
        img_rows_V_read = ap_const_logic_1;
    } else {
        img_rows_V_read = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln174_fu_145_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void AXIM2Mat::thread_ret_V_fu_180_p2() {
    ret_V_fu_180_p2 = (!shl_ln_fu_160_p3.read().is_01() || !shl_ln1352_2_fu_172_p3.read().is_01())? sc_lv<22>(): (sc_biguint<22>(shl_ln_fu_160_p3.read()) - sc_biguint<22>(shl_ln1352_2_fu_172_p3.read()));
}

void AXIM2Mat::thread_row_V_fu_150_p2() {
    row_V_fu_150_p2 = (!t_V_reg_115.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_reg_115.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void AXIM2Mat::thread_rows_V_fu_137_p0() {
    rows_V_fu_137_p0 = img_rows_V_dout.read();
}

void AXIM2Mat::thread_rows_V_fu_137_p1() {
    rows_V_fu_137_p1 = esl_sext<32,12>(rows_V_fu_137_p0.read());
}

void AXIM2Mat::thread_sext_ln178_fu_206_p1() {
    sext_ln178_fu_206_p1 = esl_sext<64,22>(add_ln178_fu_201_p2.read());
}

void AXIM2Mat::thread_shl_ln1352_2_fu_172_p3() {
    shl_ln1352_2_fu_172_p3 = esl_concat<15,7>(trunc_ln1352_1_fu_168_p1.read(), ap_const_lv7_0);
}

void AXIM2Mat::thread_shl_ln_fu_160_p3() {
    shl_ln_fu_160_p3 = esl_concat<11,11>(trunc_ln1352_fu_156_p1.read(), ap_const_lv11_0);
}

void AXIM2Mat::thread_start_out() {
    start_out = real_start.read();
}

void AXIM2Mat::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void AXIM2Mat::thread_trunc_ln1352_1_fu_168_p1() {
    trunc_ln1352_1_fu_168_p1 = t_V_reg_115.read().range(15-1, 0);
}

void AXIM2Mat::thread_trunc_ln1352_fu_156_p1() {
    trunc_ln1352_fu_156_p1 = t_V_reg_115.read().range(11-1, 0);
}

void AXIM2Mat::thread_trunc_ln178_fu_197_p1() {
    trunc_ln178_fu_197_p1 = t_V_3_reg_126.read().range(22-1, 0);
}

void AXIM2Mat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_rows_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, img_cols_V_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln174_fu_145_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln175_fu_186_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln175_fu_186_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

