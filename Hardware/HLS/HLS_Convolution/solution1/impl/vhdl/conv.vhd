-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    image_in_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    image_in_ce0 : OUT STD_LOGIC;
    image_in_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_in_we0 : OUT STD_LOGIC;
    image_in_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    image_in_ce1 : OUT STD_LOGIC;
    image_in_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_in_we1 : OUT STD_LOGIC;
    image_out_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    image_out_ce0 : OUT STD_LOGIC;
    image_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_out_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_out_we0 : OUT STD_LOGIC;
    image_out_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    image_out_ce1 : OUT STD_LOGIC;
    image_out_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    image_out_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_out_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.625250,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=904,HLS_SYN_LUT=2142,HLS_VERSION=2019_2}";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_src_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc_U0_src_rows_V_out_write : STD_LOGIC;
    signal Block_proc_U0_src_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc_U0_src_cols_V_out_write : STD_LOGIC;
    signal AXIM2Mat_U0_ap_start : STD_LOGIC;
    signal AXIM2Mat_U0_ap_done : STD_LOGIC;
    signal AXIM2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIM2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIM2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIM2Mat_U0_start_out : STD_LOGIC;
    signal AXIM2Mat_U0_start_write : STD_LOGIC;
    signal AXIM2Mat_U0_fb_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal AXIM2Mat_U0_fb_ce0 : STD_LOGIC;
    signal AXIM2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIM2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIM2Mat_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIM2Mat_U0_img_data_stream_V_write : STD_LOGIC;
    signal AXIM2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIM2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIM2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIM2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal Filter2D_U0_ap_start : STD_LOGIC;
    signal Filter2D_U0_ap_done : STD_LOGIC;
    signal Filter2D_U0_ap_continue : STD_LOGIC;
    signal Filter2D_U0_ap_idle : STD_LOGIC;
    signal Filter2D_U0_ap_ready : STD_LOGIC;
    signal Filter2D_U0_start_out : STD_LOGIC;
    signal Filter2D_U0_start_write : STD_LOGIC;
    signal Filter2D_U0_p_src_rows_V_read : STD_LOGIC;
    signal Filter2D_U0_p_src_cols_V_read : STD_LOGIC;
    signal Filter2D_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Filter2D_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Filter2D_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Mat2AXIM_U0_ap_start : STD_LOGIC;
    signal Mat2AXIM_U0_ap_done : STD_LOGIC;
    signal Mat2AXIM_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIM_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIM_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIM_U0_img_data_stream_V_read : STD_LOGIC;
    signal Mat2AXIM_U0_fb_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal Mat2AXIM_U0_fb_ce0 : STD_LOGIC;
    signal Mat2AXIM_U0_fb_we0 : STD_LOGIC;
    signal Mat2AXIM_U0_fb_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal src_rows_V_c_full_n : STD_LOGIC;
    signal src_rows_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_c_empty_n : STD_LOGIC;
    signal src_cols_V_c_full_n : STD_LOGIC;
    signal src_cols_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_c_empty_n : STD_LOGIC;
    signal src_data_stream_0_V_full_n : STD_LOGIC;
    signal src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_0_V_empty_n : STD_LOGIC;
    signal src_rows_V_c8_full_n : STD_LOGIC;
    signal src_rows_V_c8_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_c8_empty_n : STD_LOGIC;
    signal src_cols_V_c9_full_n : STD_LOGIC;
    signal src_cols_V_c9_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_c9_empty_n : STD_LOGIC;
    signal dst_data_stream_0_V_full_n : STD_LOGIC;
    signal dst_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_data_stream_0_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIM2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIM2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIM2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;
    signal start_for_Filter2D_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D_U0_full_n : STD_LOGIC;
    signal start_for_Filter2D_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIM_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIM_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIM_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIM_U0_empty_n : STD_LOGIC;
    signal Mat2AXIM_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIM_U0_start_write : STD_LOGIC;

    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        src_rows_V_out_full_n : IN STD_LOGIC;
        src_rows_V_out_write : OUT STD_LOGIC;
        src_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        src_cols_V_out_full_n : IN STD_LOGIC;
        src_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component AXIM2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fb_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        fb_ce0 : OUT STD_LOGIC;
        fb_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIM IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        fb_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
        fb_ce0 : OUT STD_LOGIC;
        fb_we0 : OUT STD_LOGIC;
        fb_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fifo_w12_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Filter2eOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIfYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        src_rows_V_out_din => Block_proc_U0_src_rows_V_out_din,
        src_rows_V_out_full_n => src_rows_V_c_full_n,
        src_rows_V_out_write => Block_proc_U0_src_rows_V_out_write,
        src_cols_V_out_din => Block_proc_U0_src_cols_V_out_din,
        src_cols_V_out_full_n => src_cols_V_c_full_n,
        src_cols_V_out_write => Block_proc_U0_src_cols_V_out_write);

    AXIM2Mat_U0 : component AXIM2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AXIM2Mat_U0_ap_start,
        start_full_n => start_for_Filter2D_U0_full_n,
        ap_done => AXIM2Mat_U0_ap_done,
        ap_continue => AXIM2Mat_U0_ap_continue,
        ap_idle => AXIM2Mat_U0_ap_idle,
        ap_ready => AXIM2Mat_U0_ap_ready,
        start_out => AXIM2Mat_U0_start_out,
        start_write => AXIM2Mat_U0_start_write,
        fb_address0 => AXIM2Mat_U0_fb_address0,
        fb_ce0 => AXIM2Mat_U0_fb_ce0,
        fb_q0 => image_in_q0,
        img_rows_V_dout => src_rows_V_c_dout,
        img_rows_V_empty_n => src_rows_V_c_empty_n,
        img_rows_V_read => AXIM2Mat_U0_img_rows_V_read,
        img_cols_V_dout => src_cols_V_c_dout,
        img_cols_V_empty_n => src_cols_V_c_empty_n,
        img_cols_V_read => AXIM2Mat_U0_img_cols_V_read,
        img_data_stream_V_din => AXIM2Mat_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => src_data_stream_0_V_full_n,
        img_data_stream_V_write => AXIM2Mat_U0_img_data_stream_V_write,
        img_rows_V_out_din => AXIM2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => src_rows_V_c8_full_n,
        img_rows_V_out_write => AXIM2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIM2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => src_cols_V_c9_full_n,
        img_cols_V_out_write => AXIM2Mat_U0_img_cols_V_out_write);

    Filter2D_U0 : component Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Filter2D_U0_ap_start,
        start_full_n => start_for_Mat2AXIM_U0_full_n,
        ap_done => Filter2D_U0_ap_done,
        ap_continue => Filter2D_U0_ap_continue,
        ap_idle => Filter2D_U0_ap_idle,
        ap_ready => Filter2D_U0_ap_ready,
        start_out => Filter2D_U0_start_out,
        start_write => Filter2D_U0_start_write,
        p_src_rows_V_dout => src_rows_V_c8_dout,
        p_src_rows_V_empty_n => src_rows_V_c8_empty_n,
        p_src_rows_V_read => Filter2D_U0_p_src_rows_V_read,
        p_src_cols_V_dout => src_cols_V_c9_dout,
        p_src_cols_V_empty_n => src_cols_V_c9_empty_n,
        p_src_cols_V_read => Filter2D_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => src_data_stream_0_V_dout,
        p_src_data_stream_V_empty_n => src_data_stream_0_V_empty_n,
        p_src_data_stream_V_read => Filter2D_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Filter2D_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => dst_data_stream_0_V_full_n,
        p_dst_data_stream_V_write => Filter2D_U0_p_dst_data_stream_V_write);

    Mat2AXIM_U0 : component Mat2AXIM
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Mat2AXIM_U0_ap_start,
        ap_done => Mat2AXIM_U0_ap_done,
        ap_continue => Mat2AXIM_U0_ap_continue,
        ap_idle => Mat2AXIM_U0_ap_idle,
        ap_ready => Mat2AXIM_U0_ap_ready,
        img_data_stream_V_dout => dst_data_stream_0_V_dout,
        img_data_stream_V_empty_n => dst_data_stream_0_V_empty_n,
        img_data_stream_V_read => Mat2AXIM_U0_img_data_stream_V_read,
        fb_address0 => Mat2AXIM_U0_fb_address0,
        fb_ce0 => Mat2AXIM_U0_fb_ce0,
        fb_we0 => Mat2AXIM_U0_fb_we0,
        fb_d0 => Mat2AXIM_U0_fb_d0);

    src_rows_V_c_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_src_rows_V_out_din,
        if_full_n => src_rows_V_c_full_n,
        if_write => Block_proc_U0_src_rows_V_out_write,
        if_dout => src_rows_V_c_dout,
        if_empty_n => src_rows_V_c_empty_n,
        if_read => AXIM2Mat_U0_img_rows_V_read);

    src_cols_V_c_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_src_cols_V_out_din,
        if_full_n => src_cols_V_c_full_n,
        if_write => Block_proc_U0_src_cols_V_out_write,
        if_dout => src_cols_V_c_dout,
        if_empty_n => src_cols_V_c_empty_n,
        if_read => AXIM2Mat_U0_img_cols_V_read);

    src_data_stream_0_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIM2Mat_U0_img_data_stream_V_din,
        if_full_n => src_data_stream_0_V_full_n,
        if_write => AXIM2Mat_U0_img_data_stream_V_write,
        if_dout => src_data_stream_0_V_dout,
        if_empty_n => src_data_stream_0_V_empty_n,
        if_read => Filter2D_U0_p_src_data_stream_V_read);

    src_rows_V_c8_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIM2Mat_U0_img_rows_V_out_din,
        if_full_n => src_rows_V_c8_full_n,
        if_write => AXIM2Mat_U0_img_rows_V_out_write,
        if_dout => src_rows_V_c8_dout,
        if_empty_n => src_rows_V_c8_empty_n,
        if_read => Filter2D_U0_p_src_rows_V_read);

    src_cols_V_c9_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIM2Mat_U0_img_cols_V_out_din,
        if_full_n => src_cols_V_c9_full_n,
        if_write => AXIM2Mat_U0_img_cols_V_out_write,
        if_dout => src_cols_V_c9_dout,
        if_empty_n => src_cols_V_c9_empty_n,
        if_read => Filter2D_U0_p_src_cols_V_read);

    dst_data_stream_0_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_p_dst_data_stream_V_din,
        if_full_n => dst_data_stream_0_V_full_n,
        if_write => Filter2D_U0_p_dst_data_stream_V_write,
        if_dout => dst_data_stream_0_V_dout,
        if_empty_n => dst_data_stream_0_V_empty_n,
        if_read => Mat2AXIM_U0_img_data_stream_V_read);

    start_for_Filter2eOg_U : component start_for_Filter2eOg
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Filter2D_U0_din,
        if_full_n => start_for_Filter2D_U0_full_n,
        if_write => AXIM2Mat_U0_start_write,
        if_dout => start_for_Filter2D_U0_dout,
        if_empty_n => start_for_Filter2D_U0_empty_n,
        if_read => Filter2D_U0_ap_ready);

    start_for_Mat2AXIfYi_U : component start_for_Mat2AXIfYi
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIM_U0_din,
        if_full_n => start_for_Mat2AXIM_U0_full_n,
        if_write => Filter2D_U0_start_write,
        if_dout => start_for_Mat2AXIM_U0_dout,
        if_empty_n => start_for_Mat2AXIM_U0_empty_n,
        if_read => Mat2AXIM_U0_ap_ready);





    ap_sync_reg_AXIM2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_AXIM2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIM2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIM2Mat_U0_ap_ready <= ap_sync_AXIM2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_proc_U0_ap_ready <= ap_sync_Block_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIM2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AXIM2Mat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                AXIM2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIM2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIM2Mat_U0_ap_ready))) then 
                AXIM2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIM2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_proc_U0_ap_ready))) then 
                Block_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIM2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIM2Mat_U0_ap_start <= ((ap_sync_reg_AXIM2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_proc_U0_ap_continue <= ap_const_logic_1;
    Block_proc_U0_ap_start <= ((ap_sync_reg_Block_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    Filter2D_U0_ap_continue <= ap_const_logic_1;
    Filter2D_U0_ap_start <= start_for_Filter2D_U0_empty_n;
    Mat2AXIM_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIM_U0_ap_start <= start_for_Mat2AXIM_U0_empty_n;
    Mat2AXIM_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIM_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIM_U0_ap_done;
    ap_idle <= (Mat2AXIM_U0_ap_idle and Filter2D_U0_ap_idle and Block_proc_U0_ap_idle and AXIM2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_AXIM2Mat_U0_ap_ready <= (ap_sync_reg_AXIM2Mat_U0_ap_ready or AXIM2Mat_U0_ap_ready);
    ap_sync_Block_proc_U0_ap_ready <= (ap_sync_reg_Block_proc_U0_ap_ready or Block_proc_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIM_U0_ap_done;
    ap_sync_ready <= (ap_sync_Block_proc_U0_ap_ready and ap_sync_AXIM2Mat_U0_ap_ready);
    image_in_address0 <= AXIM2Mat_U0_fb_address0;
    image_in_address1 <= ap_const_lv21_0;
    image_in_ce0 <= AXIM2Mat_U0_fb_ce0;
    image_in_ce1 <= ap_const_logic_0;
    image_in_d0 <= ap_const_lv8_0;
    image_in_d1 <= ap_const_lv8_0;
    image_in_we0 <= ap_const_logic_0;
    image_in_we1 <= ap_const_logic_0;
    image_out_address0 <= Mat2AXIM_U0_fb_address0;
    image_out_address1 <= ap_const_lv21_0;
    image_out_ce0 <= Mat2AXIM_U0_fb_ce0;
    image_out_ce1 <= ap_const_logic_0;
    image_out_d0 <= Mat2AXIM_U0_fb_d0;
    image_out_d1 <= ap_const_lv8_0;
    image_out_we0 <= Mat2AXIM_U0_fb_we0;
    image_out_we1 <= ap_const_logic_0;
    start_for_Filter2D_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIM_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
