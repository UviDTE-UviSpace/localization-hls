// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Threshold_HH_
#define _Threshold_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Threshold : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > src_data_stream_V_dout;
    sc_in< sc_logic > src_data_stream_V_empty_n;
    sc_out< sc_logic > src_data_stream_V_read;
    sc_in< sc_lv<10> > dst_rows_V_dout;
    sc_in< sc_logic > dst_rows_V_empty_n;
    sc_out< sc_logic > dst_rows_V_read;
    sc_in< sc_lv<11> > dst_cols_V_dout;
    sc_in< sc_logic > dst_cols_V_empty_n;
    sc_out< sc_logic > dst_cols_V_read;
    sc_out< sc_lv<8> > dst_data_stream_V_din;
    sc_in< sc_logic > dst_data_stream_V_full_n;
    sc_out< sc_logic > dst_data_stream_V_write;
    sc_out< sc_lv<10> > dst_rows_V_out_din;
    sc_in< sc_logic > dst_rows_V_out_full_n;
    sc_out< sc_logic > dst_rows_V_out_write;
    sc_out< sc_lv<11> > dst_cols_V_out_din;
    sc_in< sc_logic > dst_cols_V_out_full_n;
    sc_out< sc_logic > dst_cols_V_out_write;


    // Module declarations
    Threshold(sc_module_name name);
    SC_HAS_PROCESS(Threshold);

    ~Threshold();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > src_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln1490_reg_262;
    sc_signal< sc_logic > dst_rows_V_blk_n;
    sc_signal< sc_logic > dst_cols_V_blk_n;
    sc_signal< sc_logic > dst_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln1490_reg_262_pp0_iter1_reg;
    sc_signal< sc_logic > dst_rows_V_out_blk_n;
    sc_signal< sc_logic > dst_cols_V_out_blk_n;
    sc_signal< sc_lv<32> > t_V_1_reg_188;
    sc_signal< sc_lv<32> > rows_V_fu_199_p1;
    sc_signal< sc_lv<32> > rows_V_reg_243;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > cols_V_fu_203_p1;
    sc_signal< sc_lv<32> > cols_V_reg_248;
    sc_signal< sc_lv<1> > icmp_ln1489_fu_207_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > i_V_fu_212_p2;
    sc_signal< sc_lv<32> > i_V_reg_257;
    sc_signal< sc_lv<1> > icmp_ln1490_fu_218_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > j_V_fu_223_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln1497_fu_229_p2;
    sc_signal< sc_lv<1> > icmp_ln1497_reg_271;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<32> > t_V_reg_177;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<10> > rows_V_fu_199_p0;
    sc_signal< sc_lv<11> > cols_V_fu_203_p0;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_C8;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_cols_V_fu_203_p0();
    void thread_cols_V_fu_203_p1();
    void thread_dst_cols_V_blk_n();
    void thread_dst_cols_V_out_blk_n();
    void thread_dst_cols_V_out_din();
    void thread_dst_cols_V_out_write();
    void thread_dst_cols_V_read();
    void thread_dst_data_stream_V_blk_n();
    void thread_dst_data_stream_V_din();
    void thread_dst_data_stream_V_write();
    void thread_dst_rows_V_blk_n();
    void thread_dst_rows_V_out_blk_n();
    void thread_dst_rows_V_out_din();
    void thread_dst_rows_V_out_write();
    void thread_dst_rows_V_read();
    void thread_i_V_fu_212_p2();
    void thread_icmp_ln1489_fu_207_p2();
    void thread_icmp_ln1490_fu_218_p2();
    void thread_icmp_ln1497_fu_229_p2();
    void thread_internal_ap_ready();
    void thread_j_V_fu_223_p2();
    void thread_real_start();
    void thread_rows_V_fu_199_p0();
    void thread_rows_V_fu_199_p1();
    void thread_src_data_stream_V_blk_n();
    void thread_src_data_stream_V_read();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
