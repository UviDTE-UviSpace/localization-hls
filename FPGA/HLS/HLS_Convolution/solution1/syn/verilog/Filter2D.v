// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Filter2D (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_src_rows_V_dout,
        p_src_rows_V_empty_n,
        p_src_rows_V_read,
        p_src_cols_V_dout,
        p_src_cols_V_empty_n,
        p_src_cols_V_read,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [11:0] p_src_rows_V_dout;
input   p_src_rows_V_empty_n;
output   p_src_rows_V_read;
input  [11:0] p_src_cols_V_dout;
input   p_src_cols_V_empty_n;
output   p_src_cols_V_read;
input  [7:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [7:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_src_rows_V_read;
reg p_src_cols_V_read;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_src_rows_V_blk_n;
reg    p_src_cols_V_blk_n;
reg    p_src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln444_reg_1276;
reg   [0:0] and_ln118_2_reg_1285;
reg   [0:0] icmp_ln899_reg_1247;
reg   [0:0] icmp_ln887_reg_1238;
reg    p_dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] and_ln512_reg_1306;
reg   [0:0] and_ln512_reg_1306_pp0_iter3_reg;
reg   [31:0] t_V_2_reg_257;
wire  signed [31:0] stop_row_fu_268_p1;
reg  signed [31:0] stop_row_reg_1181;
reg    ap_block_state1;
wire  signed [31:0] cols_fu_276_p1;
reg  signed [31:0] cols_reg_1191;
wire  signed [31:0] sext_ln443_fu_290_p1;
reg  signed [31:0] sext_ln443_reg_1197;
wire  signed [31:0] sext_ln443_1_fu_300_p1;
reg  signed [31:0] sext_ln443_1_reg_1202;
wire   [1:0] add_ln507_fu_312_p2;
reg   [1:0] add_ln507_reg_1207;
wire   [1:0] xor_ln147_fu_330_p2;
reg   [1:0] xor_ln147_reg_1213;
wire  signed [31:0] sext_ln147_1_fu_354_p1;
reg  signed [31:0] sext_ln147_1_reg_1219;
wire   [1:0] add_ln458_fu_358_p2;
reg   [1:0] add_ln458_reg_1224;
wire   [0:0] icmp_ln443_fu_364_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_369_p2;
reg   [31:0] i_V_reg_1233;
wire   [0:0] icmp_ln887_fu_375_p2;
wire   [0:0] xor_ln457_fu_380_p2;
reg   [0:0] xor_ln457_reg_1242;
wire   [0:0] icmp_ln899_fu_396_p2;
wire   [0:0] icmp_ln879_fu_402_p2;
reg   [0:0] icmp_ln879_reg_1252;
wire   [0:0] icmp_ln879_1_fu_408_p2;
reg   [0:0] icmp_ln879_1_reg_1256;
wire   [0:0] icmp_ln899_1_fu_414_p2;
reg   [0:0] icmp_ln899_1_reg_1260;
wire   [1:0] sub_ln493_fu_574_p2;
reg   [1:0] sub_ln493_reg_1266;
wire   [1:0] sub_ln493_2_fu_606_p2;
reg   [1:0] sub_ln493_2_reg_1271;
wire   [0:0] icmp_ln444_fu_611_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op139_read_state4;
reg    ap_predicate_op146_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln444_reg_1276_pp0_iter1_reg;
reg   [0:0] icmp_ln444_reg_1276_pp0_iter2_reg;
wire   [31:0] j_V_fu_616_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln118_2_fu_663_p2;
reg   [0:0] and_ln118_2_reg_1285_pp0_iter1_reg;
wire   [31:0] x_fu_727_p3;
reg   [31:0] x_reg_1289;
wire   [1:0] trunc_ln458_1_fu_735_p1;
reg   [1:0] trunc_ln458_1_reg_1294;
wire   [0:0] or_ln457_fu_739_p2;
reg   [0:0] or_ln457_reg_1299;
reg   [0:0] or_ln457_reg_1299_pp0_iter1_reg;
wire   [0:0] and_ln512_fu_744_p2;
reg   [0:0] and_ln512_reg_1306_pp0_iter1_reg;
reg   [0:0] and_ln512_reg_1306_pp0_iter2_reg;
reg   [7:0] right_border_buf_0_6_reg_1310;
wire   [1:0] sub_ln493_1_fu_758_p2;
reg   [1:0] sub_ln493_1_reg_1321;
reg   [10:0] k_buf_0_val_4_addr_reg_1328;
reg   [10:0] k_buf_0_val_5_addr_reg_1334;
wire   [7:0] src_kernel_win_0_va_4_fu_876_p3;
reg   [7:0] src_kernel_win_0_va_4_reg_1340;
reg   [7:0] src_kernel_win_0_va_4_reg_1340_pp0_iter3_reg;
wire   [7:0] src_kernel_win_0_va_5_fu_894_p3;
reg   [7:0] src_kernel_win_0_va_5_reg_1347;
reg   [7:0] src_kernel_win_0_va_6_reg_1354;
reg   [0:0] p_Result_s_reg_1359;
wire   [7:0] add_ln703_4_fu_1024_p2;
reg   [7:0] add_ln703_4_reg_1365;
wire   [0:0] icmp_ln785_fu_1040_p2;
reg   [0:0] icmp_ln785_reg_1370;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state4;
reg    ap_enable_reg_pp0_iter3;
wire   [10:0] k_buf_0_val_3_address0;
reg    k_buf_0_val_3_ce0;
reg    k_buf_0_val_3_we0;
wire   [7:0] k_buf_0_val_3_q0;
wire   [10:0] k_buf_0_val_3_address1;
reg    k_buf_0_val_3_ce1;
reg    k_buf_0_val_3_we1;
wire   [10:0] k_buf_0_val_4_address0;
reg    k_buf_0_val_4_ce0;
reg    k_buf_0_val_4_we0;
wire   [7:0] k_buf_0_val_4_q0;
wire   [10:0] k_buf_0_val_4_address1;
reg    k_buf_0_val_4_ce1;
reg    k_buf_0_val_4_we1;
wire   [10:0] k_buf_0_val_5_address0;
reg    k_buf_0_val_5_ce0;
reg    k_buf_0_val_5_we0;
wire   [7:0] k_buf_0_val_5_q0;
wire   [10:0] k_buf_0_val_5_address1;
reg    k_buf_0_val_5_ce1;
reg    k_buf_0_val_5_we1;
reg   [31:0] t_V_reg_246;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln835_fu_752_p1;
reg   [7:0] src_kernel_win_0_va_fu_114;
reg   [7:0] src_kernel_win_0_va_1_fu_118;
reg   [7:0] src_kernel_win_0_va_2_fu_122;
reg   [7:0] src_kernel_win_0_va_3_fu_126;
reg   [7:0] right_border_buf_0_s_fu_130;
wire   [7:0] col_buf_0_val_0_0_fu_788_p3;
reg   [7:0] right_border_buf_0_1_fu_134;
reg   [7:0] right_border_buf_0_2_fu_138;
reg   [7:0] right_border_buf_0_3_fu_142;
wire   [7:0] col_buf_0_val_1_0_fu_806_p3;
reg   [7:0] right_border_buf_0_4_fu_146;
reg   [7:0] right_border_buf_0_5_fu_150;
wire   [7:0] col_buf_0_val_2_0_fu_823_p3;
reg   [7:0] ap_sig_allocacmp_right_border_buf_0_6;
reg    ap_block_pp0_stage0_01001;
wire  signed [11:0] stop_row_fu_268_p0;
wire  signed [11:0] sext_ln243_fu_272_p0;
wire  signed [11:0] cols_fu_276_p0;
wire  signed [11:0] sext_ln1304_fu_280_p0;
wire  signed [12:0] sext_ln1304_fu_280_p1;
wire   [12:0] add_ln443_fu_284_p2;
wire  signed [12:0] sext_ln243_fu_272_p1;
wire   [12:0] add_ln443_1_fu_294_p2;
wire  signed [11:0] trunc_ln506_fu_304_p0;
wire  signed [11:0] trunc_ln458_fu_308_p0;
wire   [1:0] trunc_ln506_fu_304_p1;
wire  signed [11:0] trunc_ln147_fu_318_p0;
wire   [0:0] trunc_ln147_fu_318_p1;
wire   [1:0] sext_ln_fu_322_p3;
wire  signed [11:0] shl_ln147_1_fu_336_p1;
wire   [12:0] shl_ln147_1_fu_336_p3;
wire  signed [13:0] sext_ln147_fu_344_p1;
wire   [13:0] add_ln147_fu_348_p2;
wire   [1:0] trunc_ln458_fu_308_p1;
wire   [30:0] tmp_fu_386_p4;
wire   [31:0] add_ln506_fu_423_p2;
wire   [0:0] tmp_1_fu_429_p3;
wire   [0:0] icmp_ln118_fu_443_p2;
wire   [0:0] xor_ln118_1_fu_437_p2;
wire   [0:0] tmp_2_fu_454_p3;
wire   [31:0] sub_ln142_fu_462_p2;
wire   [31:0] select_ln139_fu_468_p3;
wire   [31:0] add_ln506_1_fu_485_p2;
wire   [0:0] tmp_9_fu_491_p3;
wire   [0:0] icmp_ln118_1_fu_505_p2;
wire   [0:0] xor_ln118_2_fu_499_p2;
wire   [0:0] tmp_10_fu_516_p3;
wire   [31:0] sub_ln142_1_fu_524_p2;
wire   [31:0] select_ln139_1_fu_530_p3;
wire   [1:0] trunc_ln147_1_fu_481_p1;
wire   [0:0] icmp_ln144_fu_476_p2;
wire   [1:0] sub_ln144_fu_547_p2;
wire   [1:0] trunc_ln506_1_fu_419_p1;
wire   [0:0] and_ln118_fu_448_p2;
wire   [1:0] add_ln118_fu_560_p2;
wire   [1:0] select_ln144_fu_552_p3;
wire   [1:0] select_ln118_fu_566_p3;
wire   [1:0] trunc_ln147_2_fu_543_p1;
wire   [0:0] icmp_ln144_1_fu_538_p2;
wire   [1:0] sub_ln144_1_fu_579_p2;
wire   [0:0] and_ln118_1_fu_510_p2;
wire   [1:0] add_ln118_1_fu_592_p2;
wire   [1:0] select_ln144_1_fu_584_p3;
wire   [1:0] select_ln118_1_fu_598_p3;
wire   [30:0] tmp_11_fu_622_p4;
wire   [31:0] ImagLoc_x_fu_638_p2;
wire   [0:0] tmp_12_fu_644_p3;
wire   [0:0] icmp_ln118_2_fu_658_p2;
wire   [0:0] xor_ln118_3_fu_652_p2;
wire   [0:0] tmp_13_fu_669_p3;
wire   [31:0] sub_ln142_2_fu_677_p2;
wire   [31:0] select_ln139_2_fu_683_p3;
wire   [31:0] sub_ln147_fu_696_p2;
wire   [0:0] xor_ln118_4_fu_709_p2;
wire   [0:0] icmp_ln144_2_fu_691_p2;
wire   [0:0] or_ln118_fu_715_p2;
wire   [0:0] and_ln144_fu_721_p2;
wire   [31:0] select_ln118_2_fu_701_p3;
wire   [0:0] icmp_ln891_fu_632_p2;
wire   [7:0] tmp_3_fu_777_p5;
wire   [7:0] tmp_4_fu_795_p5;
wire   [7:0] tmp_5_fu_813_p5;
wire   [7:0] tmp_6_fu_865_p5;
wire   [7:0] tmp_7_fu_883_p5;
wire   [8:0] shl_ln_fu_917_p3;
wire   [7:0] shl_ln1118_fu_929_p2;
wire   [7:0] sub_ln703_fu_935_p2;
wire   [8:0] zext_ln703_fu_941_p1;
wire   [8:0] zext_ln1118_fu_913_p1;
wire   [8:0] add_ln703_fu_950_p2;
wire   [9:0] zext_ln1118_1_fu_925_p1;
wire   [9:0] zext_ln703_3_fu_956_p1;
wire   [9:0] add_ln703_1_fu_960_p2;
wire   [7:0] sub_ln703_1_fu_944_p2;
wire   [10:0] zext_ln703_2_fu_970_p1;
wire   [10:0] zext_ln703_1_fu_966_p1;
wire   [8:0] shl_ln1118_1_fu_985_p3;
wire   [9:0] zext_ln703_5_fu_997_p1;
wire   [9:0] zext_ln703_4_fu_993_p1;
wire   [9:0] add_ln703_2_fu_1000_p2;
wire   [10:0] sub_ln703_3_fu_979_p2;
wire   [10:0] zext_ln703_6_fu_1006_p1;
wire   [10:0] p_Val2_s_fu_1010_p2;
wire   [7:0] sub_ln703_2_fu_974_p2;
wire   [2:0] tmp_8_fu_1030_p4;
wire   [7:0] shl_ln703_fu_1070_p2;
wire   [7:0] add_ln703_5_fu_1075_p2;
wire   [0:0] xor_ln785_fu_1085_p2;
wire   [0:0] overflow_fu_1090_p2;
wire   [0:0] or_ln340_fu_1103_p2;
wire   [7:0] select_ln340_fu_1095_p3;
wire   [7:0] p_Val2_1_fu_1080_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_predicate_op140_store_state4;
reg    ap_enable_operation_140;
reg    ap_enable_state4_pp0_iter1_stage0;
reg    ap_predicate_op138_load_state4;
reg    ap_enable_operation_138;
reg    ap_enable_operation_163;
reg    ap_enable_state5_pp0_iter2_stage0;
reg    ap_predicate_op168_store_state5;
reg    ap_enable_operation_168;
reg    ap_predicate_op142_store_state4;
reg    ap_enable_operation_142;
reg    ap_enable_operation_136;
wire    ap_enable_operation_160;
reg    ap_predicate_op169_store_state5;
reg    ap_enable_operation_169;
reg    ap_predicate_op144_store_state4;
reg    ap_enable_operation_144;
reg    ap_enable_operation_133;
wire    ap_enable_operation_157;
reg    ap_predicate_op147_store_state4;
reg    ap_enable_operation_147;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Filter2D_k_buf_0_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
k_buf_0_val_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_3_address0),
    .ce0(k_buf_0_val_3_ce0),
    .we0(k_buf_0_val_3_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_3_q0),
    .address1(k_buf_0_val_3_address1),
    .ce1(k_buf_0_val_3_ce1),
    .we1(k_buf_0_val_3_we1),
    .d1(p_src_data_stream_V_dout)
);

Filter2D_k_buf_0_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
k_buf_0_val_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_4_address0),
    .ce0(k_buf_0_val_4_ce0),
    .we0(k_buf_0_val_4_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_4_q0),
    .address1(k_buf_0_val_4_address1),
    .ce1(k_buf_0_val_4_ce1),
    .we1(k_buf_0_val_4_we1),
    .d1(k_buf_0_val_3_q0)
);

Filter2D_k_buf_0_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
k_buf_0_val_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_5_address0),
    .ce0(k_buf_0_val_5_ce0),
    .we0(k_buf_0_val_5_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_5_q0),
    .address1(k_buf_0_val_5_address1),
    .ce1(k_buf_0_val_5_ce1),
    .we1(k_buf_0_val_5_we1),
    .d1(k_buf_0_val_4_q0)
);

conv_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
conv_mux_32_8_1_1_U9(
    .din0(right_border_buf_0_s_fu_130),
    .din1(right_border_buf_0_1_fu_134),
    .din2(8'd0),
    .din3(sub_ln493_1_reg_1321),
    .dout(tmp_3_fu_777_p5)
);

conv_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
conv_mux_32_8_1_1_U10(
    .din0(right_border_buf_0_3_fu_142),
    .din1(right_border_buf_0_4_fu_146),
    .din2(8'd0),
    .din3(sub_ln493_1_reg_1321),
    .dout(tmp_4_fu_795_p5)
);

conv_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
conv_mux_32_8_1_1_U11(
    .din0(right_border_buf_0_6_reg_1310),
    .din1(right_border_buf_0_2_fu_138),
    .din2(8'd0),
    .din3(sub_ln493_1_reg_1321),
    .dout(tmp_5_fu_813_p5)
);

conv_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
conv_mux_32_8_1_1_U12(
    .din0(col_buf_0_val_0_0_fu_788_p3),
    .din1(col_buf_0_val_1_0_fu_806_p3),
    .din2(col_buf_0_val_2_0_fu_823_p3),
    .din3(sub_ln493_reg_1266),
    .dout(tmp_6_fu_865_p5)
);

conv_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
conv_mux_32_8_1_1_U13(
    .din0(col_buf_0_val_0_0_fu_788_p3),
    .din1(col_buf_0_val_1_0_fu_806_p3),
    .din2(col_buf_0_val_2_0_fu_823_p3),
    .din3(sub_ln493_2_reg_1271),
    .dout(tmp_7_fu_883_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln443_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln444_fu_611_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln443_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state4)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((icmp_ln443_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_fu_611_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_2_reg_257 <= j_V_fu_616_p2;
    end else if (((icmp_ln443_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_2_reg_257 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_V_reg_246 <= i_V_reg_1233;
    end else if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_246 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln458_reg_1224 <= add_ln458_fu_358_p2;
        add_ln507_reg_1207 <= add_ln507_fu_312_p2;
        cols_reg_1191 <= cols_fu_276_p1;
        sext_ln147_1_reg_1219[31 : 1] <= sext_ln147_1_fu_354_p1[31 : 1];
        sext_ln443_1_reg_1202 <= sext_ln443_1_fu_300_p1;
        sext_ln443_reg_1197 <= sext_ln443_fu_290_p1;
        stop_row_reg_1181 <= stop_row_fu_268_p1;
        xor_ln147_reg_1213 <= xor_ln147_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln512_reg_1306_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln703_4_reg_1365 <= add_ln703_4_fu_1024_p2;
        icmp_ln785_reg_1370 <= icmp_ln785_fu_1040_p2;
        p_Result_s_reg_1359 <= p_Val2_s_fu_1010_p2[32'd10];
        src_kernel_win_0_va_6_reg_1354 <= src_kernel_win_0_va_fu_114;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_fu_611_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln118_2_reg_1285 <= and_ln118_2_fu_663_p2;
        and_ln512_reg_1306 <= and_ln512_fu_744_p2;
        or_ln457_reg_1299 <= or_ln457_fu_739_p2;
        trunc_ln458_1_reg_1294 <= trunc_ln458_1_fu_735_p1;
        x_reg_1289 <= x_fu_727_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln118_2_reg_1285_pp0_iter1_reg <= and_ln118_2_reg_1285;
        and_ln512_reg_1306_pp0_iter1_reg <= and_ln512_reg_1306;
        icmp_ln444_reg_1276 <= icmp_ln444_fu_611_p2;
        icmp_ln444_reg_1276_pp0_iter1_reg <= icmp_ln444_reg_1276;
        or_ln457_reg_1299_pp0_iter1_reg <= or_ln457_reg_1299;
        right_border_buf_0_6_reg_1310 <= ap_sig_allocacmp_right_border_buf_0_6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln512_reg_1306_pp0_iter2_reg <= and_ln512_reg_1306_pp0_iter1_reg;
        and_ln512_reg_1306_pp0_iter3_reg <= and_ln512_reg_1306_pp0_iter2_reg;
        icmp_ln444_reg_1276_pp0_iter2_reg <= icmp_ln444_reg_1276_pp0_iter1_reg;
        src_kernel_win_0_va_4_reg_1340 <= src_kernel_win_0_va_4_fu_876_p3;
        src_kernel_win_0_va_4_reg_1340_pp0_iter3_reg <= src_kernel_win_0_va_4_reg_1340;
        src_kernel_win_0_va_5_reg_1347 <= src_kernel_win_0_va_5_fu_894_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_1233 <= i_V_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln879_1_reg_1256 <= icmp_ln879_1_fu_408_p2;
        icmp_ln879_reg_1252 <= icmp_ln879_fu_402_p2;
        icmp_ln887_reg_1238 <= icmp_ln887_fu_375_p2;
        icmp_ln899_1_reg_1260 <= icmp_ln899_1_fu_414_p2;
        icmp_ln899_reg_1247 <= icmp_ln899_fu_396_p2;
        sub_ln493_2_reg_1271 <= sub_ln493_2_fu_606_p2;
        sub_ln493_reg_1266 <= sub_ln493_fu_574_p2;
        xor_ln457_reg_1242 <= xor_ln457_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_reg_1276 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_addr_reg_1328 <= zext_ln835_fu_752_p1;
        k_buf_0_val_5_addr_reg_1334 <= zext_ln835_fu_752_p1;
        sub_ln493_1_reg_1321 <= sub_ln493_1_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        right_border_buf_0_1_fu_134 <= right_border_buf_0_s_fu_130;
        right_border_buf_0_2_fu_138 <= right_border_buf_0_6_reg_1310;
        right_border_buf_0_3_fu_142 <= col_buf_0_val_1_0_fu_806_p3;
        right_border_buf_0_4_fu_146 <= right_border_buf_0_3_fu_142;
        right_border_buf_0_5_fu_150 <= col_buf_0_val_2_0_fu_823_p3;
        right_border_buf_0_s_fu_130 <= col_buf_0_val_0_0_fu_788_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_reg_1276_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_kernel_win_0_va_1_fu_118 <= src_kernel_win_0_va_fu_114;
        src_kernel_win_0_va_2_fu_122 <= src_kernel_win_0_va_5_reg_1347;
        src_kernel_win_0_va_3_fu_126 <= src_kernel_win_0_va_2_fu_122;
        src_kernel_win_0_va_fu_114 <= src_kernel_win_0_va_4_reg_1340;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_right_border_buf_0_6 = col_buf_0_val_2_0_fu_823_p3;
    end else begin
        ap_sig_allocacmp_right_border_buf_0_6 = right_border_buf_0_5_fu_150;
    end
end

always @ (*) begin
    if (((icmp_ln443_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_1276 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_ce0 = 1'b1;
    end else begin
        k_buf_0_val_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_ce1 = 1'b1;
    end else begin
        k_buf_0_val_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln879_reg_1252 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_we0 = 1'b1;
    end else begin
        k_buf_0_val_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln444_reg_1276 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_we1 = 1'b1;
    end else begin
        k_buf_0_val_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_1276 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_ce0 = 1'b1;
    end else begin
        k_buf_0_val_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_ce1 = 1'b1;
    end else begin
        k_buf_0_val_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln879_1_reg_1256 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_we0 = 1'b1;
    end else begin
        k_buf_0_val_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_we1 = 1'b1;
    end else begin
        k_buf_0_val_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln879_reg_1252 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((or_ln457_reg_1299 == 1'd1) & (icmp_ln444_reg_1276 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        k_buf_0_val_5_ce0 = 1'b1;
    end else begin
        k_buf_0_val_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_ce1 = 1'b1;
    end else begin
        k_buf_0_val_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln879_reg_1252 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_we0 = 1'b1;
    end else begin
        k_buf_0_val_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_we1 = 1'b1;
    end else begin
        k_buf_0_val_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln512_reg_1306_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_dst_data_stream_V_blk_n = p_dst_data_stream_V_full_n;
    end else begin
        p_dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln512_reg_1306_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_V_write = 1'b1;
    end else begin
        p_dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_blk_n = p_src_cols_V_empty_n;
    end else begin
        p_src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_read = 1'b1;
    end else begin
        p_src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln444_reg_1276 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_src_data_stream_V_blk_n = p_src_data_stream_V_empty_n;
    end else begin
        p_src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op146_read_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op139_read_state4 == 1'b1)))) begin
        p_src_data_stream_V_read = 1'b1;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_blk_n = p_src_rows_V_empty_n;
    end else begin
        p_src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_read = 1'b1;
    end else begin
        p_src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln443_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ImagLoc_x_fu_638_p2 = ($signed(32'd4294967295) + $signed(t_V_2_reg_257));

assign add_ln118_1_fu_592_p2 = (2'd1 + trunc_ln506_1_fu_419_p1);

assign add_ln118_fu_560_p2 = ($signed(2'd3) + $signed(trunc_ln506_1_fu_419_p1));

assign add_ln147_fu_348_p2 = ($signed(14'd16382) + $signed(sext_ln147_fu_344_p1));

assign add_ln443_1_fu_294_p2 = ($signed(13'd2) + $signed(sext_ln243_fu_272_p1));

assign add_ln443_fu_284_p2 = ($signed(13'd2) + $signed(sext_ln1304_fu_280_p1));

assign add_ln458_fu_358_p2 = ($signed(2'd3) + $signed(trunc_ln458_fu_308_p1));

assign add_ln506_1_fu_485_p2 = ($signed(32'd4294967293) + $signed(t_V_reg_246));

assign add_ln506_fu_423_p2 = ($signed(32'd4294967295) + $signed(t_V_reg_246));

assign add_ln507_fu_312_p2 = ($signed(2'd3) + $signed(trunc_ln506_fu_304_p1));

assign add_ln703_1_fu_960_p2 = (zext_ln1118_1_fu_925_p1 + zext_ln703_3_fu_956_p1);

assign add_ln703_2_fu_1000_p2 = (zext_ln703_5_fu_997_p1 + zext_ln703_4_fu_993_p1);

assign add_ln703_4_fu_1024_p2 = (sub_ln703_2_fu_974_p2 + src_kernel_win_0_va_1_fu_118);

assign add_ln703_5_fu_1075_p2 = (src_kernel_win_0_va_4_reg_1340_pp0_iter3_reg + shl_ln703_fu_1070_p2);

assign add_ln703_fu_950_p2 = (zext_ln703_fu_941_p1 + zext_ln1118_fu_913_p1);

assign and_ln118_1_fu_510_p2 = (xor_ln118_2_fu_499_p2 & icmp_ln118_1_fu_505_p2);

assign and_ln118_2_fu_663_p2 = (xor_ln118_3_fu_652_p2 & icmp_ln118_2_fu_658_p2);

assign and_ln118_fu_448_p2 = (xor_ln118_1_fu_437_p2 & icmp_ln118_fu_443_p2);

assign and_ln144_fu_721_p2 = (or_ln118_fu_715_p2 & icmp_ln144_2_fu_691_p2);

assign and_ln512_fu_744_p2 = (icmp_ln899_reg_1247 & icmp_ln891_fu_632_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'd1 == and_ln512_reg_1306_pp0_iter3_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op146_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op139_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == and_ln512_reg_1306_pp0_iter3_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op146_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op139_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == and_ln512_reg_1306_pp0_iter3_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op146_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op139_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op146_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op139_read_state4 == 1'b1)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((1'd1 == and_ln512_reg_1306_pp0_iter3_reg) & (p_dst_data_stream_V_full_n == 1'b0));
end

always @ (*) begin
    ap_enable_operation_133 = (icmp_ln444_reg_1276 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_136 = (icmp_ln444_reg_1276 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_138 = (ap_predicate_op138_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_140 = (ap_predicate_op140_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_142 = (ap_predicate_op142_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_144 = (ap_predicate_op144_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_147 = (ap_predicate_op147_store_state4 == 1'b1);
end

assign ap_enable_operation_157 = (1'b1 == 1'b1);

assign ap_enable_operation_160 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_163 = (or_ln457_reg_1299_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_168 = (ap_predicate_op168_store_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_169 = (ap_predicate_op169_store_state5 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter2_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_predicate_op138_load_state4 = ((or_ln457_reg_1299 == 1'd1) & (icmp_ln444_reg_1276 == 1'd0));
end

always @ (*) begin
    ap_predicate_op139_read_state4 = ((1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0));
end

always @ (*) begin
    ap_predicate_op140_store_state4 = ((icmp_ln879_reg_1252 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0));
end

always @ (*) begin
    ap_predicate_op142_store_state4 = ((icmp_ln879_1_reg_1256 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0));
end

always @ (*) begin
    ap_predicate_op144_store_state4 = ((icmp_ln879_reg_1252 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln899_reg_1247 == 1'd0) & (icmp_ln444_reg_1276 == 1'd0));
end

always @ (*) begin
    ap_predicate_op146_read_state4 = ((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln444_reg_1276 == 1'd0));
end

always @ (*) begin
    ap_predicate_op147_store_state4 = ((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285) & (icmp_ln444_reg_1276 == 1'd0));
end

always @ (*) begin
    ap_predicate_op168_store_state5 = ((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285_pp0_iter1_reg));
end

always @ (*) begin
    ap_predicate_op169_store_state5 = ((icmp_ln887_reg_1238 == 1'd1) & (icmp_ln899_reg_1247 == 1'd1) & (1'd1 == and_ln118_2_reg_1285_pp0_iter1_reg));
end

assign ap_ready = internal_ap_ready;

assign col_buf_0_val_0_0_fu_788_p3 = ((or_ln457_reg_1299_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_3_q0 : tmp_3_fu_777_p5);

assign col_buf_0_val_1_0_fu_806_p3 = ((or_ln457_reg_1299_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_4_q0 : tmp_4_fu_795_p5);

assign col_buf_0_val_2_0_fu_823_p3 = ((or_ln457_reg_1299_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_5_q0 : tmp_5_fu_813_p5);

assign cols_fu_276_p0 = p_src_cols_V_dout;

assign cols_fu_276_p1 = cols_fu_276_p0;

assign i_V_fu_369_p2 = (t_V_reg_246 + 32'd1);

assign icmp_ln118_1_fu_505_p2 = (($signed(add_ln506_1_fu_485_p2) < $signed(stop_row_reg_1181)) ? 1'b1 : 1'b0);

assign icmp_ln118_2_fu_658_p2 = (($signed(ImagLoc_x_fu_638_p2) < $signed(cols_reg_1191)) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_443_p2 = (($signed(add_ln506_fu_423_p2) < $signed(stop_row_reg_1181)) ? 1'b1 : 1'b0);

assign icmp_ln144_1_fu_538_p2 = (($signed(select_ln139_1_fu_530_p3) < $signed(stop_row_reg_1181)) ? 1'b1 : 1'b0);

assign icmp_ln144_2_fu_691_p2 = (($signed(select_ln139_2_fu_683_p3) < $signed(cols_reg_1191)) ? 1'b1 : 1'b0);

assign icmp_ln144_fu_476_p2 = (($signed(select_ln139_fu_468_p3) < $signed(stop_row_reg_1181)) ? 1'b1 : 1'b0);

assign icmp_ln443_fu_364_p2 = ((t_V_reg_246 == sext_ln443_1_reg_1202) ? 1'b1 : 1'b0);

assign icmp_ln444_fu_611_p2 = ((t_V_2_reg_257 == sext_ln443_reg_1197) ? 1'b1 : 1'b0);

assign icmp_ln785_fu_1040_p2 = ((tmp_8_fu_1030_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_408_p2 = ((t_V_reg_246 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_402_p2 = ((t_V_reg_246 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_375_p2 = ((t_V_reg_246 < stop_row_reg_1181) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_632_p2 = ((tmp_11_fu_622_p4 != 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_414_p2 = ((t_V_reg_246 > stop_row_reg_1181) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_396_p2 = ((tmp_fu_386_p4 != 31'd0) ? 1'b1 : 1'b0);

assign j_V_fu_616_p2 = (t_V_2_reg_257 + 32'd1);

assign k_buf_0_val_3_address0 = zext_ln835_fu_752_p1;

assign k_buf_0_val_3_address1 = zext_ln835_fu_752_p1;

assign k_buf_0_val_4_address0 = zext_ln835_fu_752_p1;

assign k_buf_0_val_4_address1 = k_buf_0_val_4_addr_reg_1328;

assign k_buf_0_val_5_address0 = zext_ln835_fu_752_p1;

assign k_buf_0_val_5_address1 = k_buf_0_val_5_addr_reg_1334;

assign or_ln118_fu_715_p2 = (xor_ln118_4_fu_709_p2 | tmp_12_fu_644_p3);

assign or_ln340_fu_1103_p2 = (p_Result_s_reg_1359 | overflow_fu_1090_p2);

assign or_ln457_fu_739_p2 = (xor_ln457_reg_1242 | icmp_ln118_2_fu_658_p2);

assign overflow_fu_1090_p2 = (xor_ln785_fu_1085_p2 & icmp_ln785_reg_1370);

assign p_Val2_1_fu_1080_p2 = (add_ln703_4_reg_1365 + add_ln703_5_fu_1075_p2);

assign p_Val2_s_fu_1010_p2 = (sub_ln703_3_fu_979_p2 + zext_ln703_6_fu_1006_p1);

assign p_dst_data_stream_V_din = ((or_ln340_fu_1103_p2[0:0] === 1'b1) ? select_ln340_fu_1095_p3 : p_Val2_1_fu_1080_p2);

assign select_ln118_1_fu_598_p3 = ((and_ln118_1_fu_510_p2[0:0] === 1'b1) ? add_ln118_1_fu_592_p2 : select_ln144_1_fu_584_p3);

assign select_ln118_2_fu_701_p3 = ((and_ln118_2_fu_663_p2[0:0] === 1'b1) ? ImagLoc_x_fu_638_p2 : sub_ln147_fu_696_p2);

assign select_ln118_fu_566_p3 = ((and_ln118_fu_448_p2[0:0] === 1'b1) ? add_ln118_fu_560_p2 : select_ln144_fu_552_p3);

assign select_ln139_1_fu_530_p3 = ((tmp_10_fu_516_p3[0:0] === 1'b1) ? sub_ln142_1_fu_524_p2 : add_ln506_1_fu_485_p2);

assign select_ln139_2_fu_683_p3 = ((tmp_13_fu_669_p3[0:0] === 1'b1) ? sub_ln142_2_fu_677_p2 : ImagLoc_x_fu_638_p2);

assign select_ln139_fu_468_p3 = ((tmp_2_fu_454_p3[0:0] === 1'b1) ? sub_ln142_fu_462_p2 : add_ln506_fu_423_p2);

assign select_ln144_1_fu_584_p3 = ((icmp_ln144_1_fu_538_p2[0:0] === 1'b1) ? trunc_ln147_2_fu_543_p1 : sub_ln144_1_fu_579_p2);

assign select_ln144_fu_552_p3 = ((icmp_ln144_fu_476_p2[0:0] === 1'b1) ? trunc_ln147_1_fu_481_p1 : sub_ln144_fu_547_p2);

assign select_ln340_fu_1095_p3 = ((xor_ln785_fu_1085_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign sext_ln1304_fu_280_p0 = p_src_cols_V_dout;

assign sext_ln1304_fu_280_p1 = sext_ln1304_fu_280_p0;

assign sext_ln147_1_fu_354_p1 = $signed(add_ln147_fu_348_p2);

assign sext_ln147_fu_344_p1 = $signed(shl_ln147_1_fu_336_p3);

assign sext_ln243_fu_272_p0 = p_src_rows_V_dout;

assign sext_ln243_fu_272_p1 = sext_ln243_fu_272_p0;

assign sext_ln443_1_fu_300_p1 = $signed(add_ln443_1_fu_294_p2);

assign sext_ln443_fu_290_p1 = $signed(add_ln443_fu_284_p2);

assign sext_ln_fu_322_p3 = {{trunc_ln147_fu_318_p1}, {1'd0}};

assign shl_ln1118_1_fu_985_p3 = {{src_kernel_win_0_va_fu_114}, {1'd0}};

assign shl_ln1118_fu_929_p2 = src_kernel_win_0_va_2_fu_122 << 8'd1;

assign shl_ln147_1_fu_336_p1 = p_src_cols_V_dout;

assign shl_ln147_1_fu_336_p3 = {{shl_ln147_1_fu_336_p1}, {1'd0}};

assign shl_ln703_fu_1070_p2 = src_kernel_win_0_va_6_reg_1354 << 8'd1;

assign shl_ln_fu_917_p3 = {{src_kernel_win_0_va_2_fu_122}, {1'd0}};

assign src_kernel_win_0_va_4_fu_876_p3 = ((icmp_ln899_1_reg_1260[0:0] === 1'b1) ? tmp_6_fu_865_p5 : col_buf_0_val_0_0_fu_788_p3);

assign src_kernel_win_0_va_5_fu_894_p3 = ((icmp_ln899_1_reg_1260[0:0] === 1'b1) ? tmp_7_fu_883_p5 : col_buf_0_val_2_0_fu_823_p3);

assign start_out = real_start;

assign stop_row_fu_268_p0 = p_src_rows_V_dout;

assign stop_row_fu_268_p1 = stop_row_fu_268_p0;

assign sub_ln142_1_fu_524_p2 = (32'd3 - t_V_reg_246);

assign sub_ln142_2_fu_677_p2 = (32'd1 - t_V_2_reg_257);

assign sub_ln142_fu_462_p2 = (32'd1 - t_V_reg_246);

assign sub_ln144_1_fu_579_p2 = (xor_ln147_reg_1213 - trunc_ln147_2_fu_543_p1);

assign sub_ln144_fu_547_p2 = (xor_ln147_reg_1213 - trunc_ln147_1_fu_481_p1);

assign sub_ln147_fu_696_p2 = ($signed(sext_ln147_1_reg_1219) - $signed(select_ln139_2_fu_683_p3));

assign sub_ln493_1_fu_758_p2 = (add_ln458_reg_1224 - trunc_ln458_1_reg_1294);

assign sub_ln493_2_fu_606_p2 = (add_ln507_reg_1207 - select_ln118_1_fu_598_p3);

assign sub_ln493_fu_574_p2 = (add_ln507_reg_1207 - select_ln118_fu_566_p3);

assign sub_ln703_1_fu_944_p2 = (sub_ln703_fu_935_p2 - src_kernel_win_0_va_3_fu_126);

assign sub_ln703_2_fu_974_p2 = (sub_ln703_1_fu_944_p2 - src_kernel_win_0_va_5_reg_1347);

assign sub_ln703_3_fu_979_p2 = (zext_ln703_2_fu_970_p1 - zext_ln703_1_fu_966_p1);

assign sub_ln703_fu_935_p2 = (8'd0 - shl_ln1118_fu_929_p2);

assign tmp_10_fu_516_p3 = add_ln506_1_fu_485_p2[32'd31];

assign tmp_11_fu_622_p4 = {{t_V_2_reg_257[31:1]}};

assign tmp_12_fu_644_p3 = ImagLoc_x_fu_638_p2[32'd31];

assign tmp_13_fu_669_p3 = ImagLoc_x_fu_638_p2[32'd31];

assign tmp_1_fu_429_p3 = add_ln506_fu_423_p2[32'd31];

assign tmp_2_fu_454_p3 = add_ln506_fu_423_p2[32'd31];

assign tmp_8_fu_1030_p4 = {{p_Val2_s_fu_1010_p2[10:8]}};

assign tmp_9_fu_491_p3 = add_ln506_1_fu_485_p2[32'd31];

assign tmp_fu_386_p4 = {{t_V_reg_246[31:1]}};

assign trunc_ln147_1_fu_481_p1 = select_ln139_fu_468_p3[1:0];

assign trunc_ln147_2_fu_543_p1 = select_ln139_1_fu_530_p3[1:0];

assign trunc_ln147_fu_318_p0 = p_src_rows_V_dout;

assign trunc_ln147_fu_318_p1 = trunc_ln147_fu_318_p0[0:0];

assign trunc_ln458_1_fu_735_p1 = x_fu_727_p3[1:0];

assign trunc_ln458_fu_308_p0 = p_src_cols_V_dout;

assign trunc_ln458_fu_308_p1 = trunc_ln458_fu_308_p0[1:0];

assign trunc_ln506_1_fu_419_p1 = t_V_reg_246[1:0];

assign trunc_ln506_fu_304_p0 = p_src_rows_V_dout;

assign trunc_ln506_fu_304_p1 = trunc_ln506_fu_304_p0[1:0];

assign x_fu_727_p3 = ((and_ln144_fu_721_p2[0:0] === 1'b1) ? select_ln139_2_fu_683_p3 : select_ln118_2_fu_701_p3);

assign xor_ln118_1_fu_437_p2 = (tmp_1_fu_429_p3 ^ 1'd1);

assign xor_ln118_2_fu_499_p2 = (tmp_9_fu_491_p3 ^ 1'd1);

assign xor_ln118_3_fu_652_p2 = (tmp_12_fu_644_p3 ^ 1'd1);

assign xor_ln118_4_fu_709_p2 = (icmp_ln118_2_fu_658_p2 ^ 1'd1);

assign xor_ln147_fu_330_p2 = (sext_ln_fu_322_p3 ^ 2'd2);

assign xor_ln457_fu_380_p2 = (icmp_ln887_fu_375_p2 ^ 1'd1);

assign xor_ln785_fu_1085_p2 = (p_Result_s_reg_1359 ^ 1'd1);

assign zext_ln1118_1_fu_925_p1 = shl_ln_fu_917_p3;

assign zext_ln1118_fu_913_p1 = src_kernel_win_0_va_3_fu_126;

assign zext_ln703_1_fu_966_p1 = add_ln703_1_fu_960_p2;

assign zext_ln703_2_fu_970_p1 = src_kernel_win_0_va_1_fu_118;

assign zext_ln703_3_fu_956_p1 = add_ln703_fu_950_p2;

assign zext_ln703_4_fu_993_p1 = shl_ln1118_1_fu_985_p3;

assign zext_ln703_5_fu_997_p1 = src_kernel_win_0_va_4_reg_1340;

assign zext_ln703_6_fu_1006_p1 = add_ln703_2_fu_1000_p2;

assign zext_ln703_fu_941_p1 = src_kernel_win_0_va_5_reg_1347;

assign zext_ln835_fu_752_p1 = x_reg_1289;

always @ (posedge ap_clk) begin
    sext_ln147_1_reg_1219[0] <= 1'b0;
end

endmodule //Filter2D
