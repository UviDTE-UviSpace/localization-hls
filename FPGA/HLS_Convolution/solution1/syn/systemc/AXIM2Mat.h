// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AXIM2Mat_HH_
#define _AXIM2Mat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AXIM2Mat : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<21> > fb_address0;
    sc_out< sc_logic > fb_ce0;
    sc_in< sc_lv<8> > fb_q0;
    sc_in< sc_lv<12> > img_rows_V_dout;
    sc_in< sc_logic > img_rows_V_empty_n;
    sc_out< sc_logic > img_rows_V_read;
    sc_in< sc_lv<12> > img_cols_V_dout;
    sc_in< sc_logic > img_cols_V_empty_n;
    sc_out< sc_logic > img_cols_V_read;
    sc_out< sc_lv<8> > img_data_stream_V_din;
    sc_in< sc_logic > img_data_stream_V_full_n;
    sc_out< sc_logic > img_data_stream_V_write;
    sc_out< sc_lv<12> > img_rows_V_out_din;
    sc_in< sc_logic > img_rows_V_out_full_n;
    sc_out< sc_logic > img_rows_V_out_write;
    sc_out< sc_lv<12> > img_cols_V_out_din;
    sc_in< sc_logic > img_cols_V_out_full_n;
    sc_out< sc_logic > img_cols_V_out_write;


    // Module declarations
    AXIM2Mat(sc_module_name name);
    SC_HAS_PROCESS(AXIM2Mat);

    ~AXIM2Mat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > img_rows_V_blk_n;
    sc_signal< sc_logic > img_cols_V_blk_n;
    sc_signal< sc_logic > img_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln175_reg_235;
    sc_signal< sc_logic > img_rows_V_out_blk_n;
    sc_signal< sc_logic > img_cols_V_out_blk_n;
    sc_signal< sc_lv<32> > t_V_3_reg_126;
    sc_signal< sc_lv<32> > rows_V_fu_137_p1;
    sc_signal< sc_lv<32> > rows_V_reg_211;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > cols_V_fu_141_p1;
    sc_signal< sc_lv<32> > cols_V_reg_216;
    sc_signal< sc_lv<1> > icmp_ln174_fu_145_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > row_V_fu_150_p2;
    sc_signal< sc_lv<32> > row_V_reg_225;
    sc_signal< sc_lv<22> > ret_V_fu_180_p2;
    sc_signal< sc_lv<22> > ret_V_reg_230;
    sc_signal< sc_lv<1> > icmp_ln175_fu_186_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > col_V_fu_191_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<32> > t_V_reg_115;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > sext_ln178_fu_206_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<12> > rows_V_fu_137_p0;
    sc_signal< sc_lv<12> > cols_V_fu_141_p0;
    sc_signal< sc_lv<11> > trunc_ln1352_fu_156_p1;
    sc_signal< sc_lv<15> > trunc_ln1352_1_fu_168_p1;
    sc_signal< sc_lv<22> > shl_ln_fu_160_p3;
    sc_signal< sc_lv<22> > shl_ln1352_2_fu_172_p3;
    sc_signal< sc_lv<22> > trunc_ln178_fu_197_p1;
    sc_signal< sc_lv<22> > add_ln178_fu_201_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<7> ap_const_lv7_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln178_fu_201_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_col_V_fu_191_p2();
    void thread_cols_V_fu_141_p0();
    void thread_cols_V_fu_141_p1();
    void thread_fb_address0();
    void thread_fb_ce0();
    void thread_icmp_ln174_fu_145_p2();
    void thread_icmp_ln175_fu_186_p2();
    void thread_img_cols_V_blk_n();
    void thread_img_cols_V_out_blk_n();
    void thread_img_cols_V_out_din();
    void thread_img_cols_V_out_write();
    void thread_img_cols_V_read();
    void thread_img_data_stream_V_blk_n();
    void thread_img_data_stream_V_din();
    void thread_img_data_stream_V_write();
    void thread_img_rows_V_blk_n();
    void thread_img_rows_V_out_blk_n();
    void thread_img_rows_V_out_din();
    void thread_img_rows_V_out_write();
    void thread_img_rows_V_read();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_ret_V_fu_180_p2();
    void thread_row_V_fu_150_p2();
    void thread_rows_V_fu_137_p0();
    void thread_rows_V_fu_137_p1();
    void thread_sext_ln178_fu_206_p1();
    void thread_shl_ln1352_2_fu_172_p3();
    void thread_shl_ln_fu_160_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_trunc_ln1352_1_fu_168_p1();
    void thread_trunc_ln1352_fu_156_p1();
    void thread_trunc_ln178_fu_197_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
